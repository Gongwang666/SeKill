<?xml version="1.0" encoding="UTF-8"?>  
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:context="http://www.springframework.org/schema/context" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop" xsi:schemaLocation="  
http://www.springframework.org/schema/beans   
http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
http://www.springframework.org/schema/context   
http://www.springframework.org/schema/context/spring-context-3.0.xsd    
http://www.springframework.org/schema/tx   
http://www.springframework.org/schema/tx/spring-tx-3.0.xsd  
http://www.springframework.org/schema/aop   
http://www.springframework.org/schema/aop/spring-aop-3.0.xsd  
">  
  
    <!-- JNDI(通过Tomcat)方式配置数据源 -->  
    <!-- <bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean"> <property name="jndiName" value="${jndiName}"></property> </bean> -->  
      
    <!-- 自动扫描 -->
	<context:component-scan base-package="com.hzyc.sekill.dao,com.hzyc.sekill.basedao,com.hzyc.sekill.service" />

	<!-- 引入配置文件 -->
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="classpath:config.properties" />
	</bean>
    <!-- dbcp数据源 -->
	 <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">        
	    <property name="driverClassName" value="${driverClassName}" />       
	    <property name="url" value="${jdbc_url}" />       
	    <property name="username" value="${jdbc_username}" />       
	    <property name="password" value="${jdbc_password}" />
	    <!-- 连接池启动时的初始化 -->
	    <property name="initialSize" value="1"/>
	    <!-- 连接池的最大值 -->
		<!-- <property name="maxActive" value="500"/> -->
	    <!-- 最小空闲值，当空闲的连接数少于阀值时，连接池就会预申请去一些链接，以免洪峰来时来不及申请-->
		<property name="minIdle" value="1"/>
		<!-- 最大等待连接中的数量，设置为0时，表示没有限制。如果最大空闲值，当经过一个高峰时间后，连接池可以慢慢将已经用不到的链接慢慢释放一部分，一直减少到maxle为止-->
		<property name="maxIdle" value="20"/>
		<!-- 最大等待秒数，单位为毫秒， 超过时间会报出错误信息 -->
		<property name="maxWait" value="1000"/>
		<property name="maxActive" value="100"/>
		<property name="timeBetweenEvictionRunsMillis" value="300000"/>
		<!--是否自我中断，默认是 false  -->
		<property name="removeAbandoned" value="true"/>
		<!-- 几秒后数据连接会自动断开 -->
		<property name="removeAbandonedTimeout" value="60"/>
		<!-- 是否记录中断事件 默认false -->
		<property name="logAbandoned" value="false"/>  
	 </bean>
  
    <!-- 配置hibernate session工厂 -->  
    <bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">  
        <property name="dataSource" ref="dataSource" />  
        <property name="hibernateProperties">  
            <props>  
                <prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>  
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>  
                <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>  
                <prop key="hibernate.format_sql">${hibernate.format_sql}</prop>  
            </props>  
        </property>  
  
        <!-- 自动扫描注解方式配置的hibernate类文件 -->  
        <property name="packagesToScan">  
            <list>  
                <value>com.hzyc.sekill.model</value>  
            </list>  
        </property>  
    </bean>  
    <!-- 开启hibernateTemplate，并且为其注入sessionFactory 使用hibernateTemplate 
	不太方便的就是要获取session的通过getSessionFactory（）方法获取 -->
	<bean id="hibernateTemplate" class="org.springframework.orm.hibernate3.HibernateTemplate">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
  
    <!-- 配置事务管理器 -->  
    <bean name="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">  
        <property name="sessionFactory" ref="sessionFactory"></property>  
    </bean>  
  
    <!-- 注解方式配置事物 -->  
    <!-- <tx:annotation-driven transaction-manager="transactionManager" /> -->  
  
    <!-- 拦截器方式配置事物 -->  
    <tx:advice id="transactionAdvice" transaction-manager="transactionManager">  
        <tx:attributes>  
            <tx:method name="add*" />  
            <tx:method name="save*" />  
            <tx:method name="update*" />  
            <tx:method name="modify*" />  
            <tx:method name="edit*" />  
            <tx:method name="delete*" />  
            <tx:method name="remove*" />  
            <tx:method name="repair" />  
            <tx:method name="deleteAndRepair" />  
  
            <tx:method name="get*" propagation="SUPPORTS" />  
            <tx:method name="find*" propagation="SUPPORTS" />  
            <tx:method name="load*" propagation="SUPPORTS" />  
            <tx:method name="search*" propagation="SUPPORTS" />  
            <tx:method name="datagrid*" propagation="SUPPORTS" />  
  
            <tx:method name="*" propagation="SUPPORTS" />  
        </tx:attributes>  
    </tx:advice>  
    <aop:config>  
        <aop:pointcut id="transactionPointcut" expression="execution(* com.hzyc.sekill.service..*Impl.*(..))" />  
        <aop:advisor pointcut-ref="transactionPointcut" advice-ref="transactionAdvice" />  
    </aop:config>  
  
  
</beans>  